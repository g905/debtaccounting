/**
 * This file was generated by the JPA Modeler
 */
package ru.ilb.debtaccounting.model;

import java.io.Serializable;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import javax.persistence.Basic;
import javax.persistence.Embedded;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.*;

/**
 * @author slavb
 */

@XmlAccessorType(XmlAccessType.FIELD)
@Entity
public class Transaction implements Serializable {

    @Id
    @GeneratedValue
    private Long id;

    /**
     * Дата транзакции
     */
    @Basic
    private LocalDate date;

    @Basic
    private TransactionStatusCode status;

    /**
     * Сумма
     */
    @Embedded
    private Money amount;

    @ManyToOne(fetch = FetchType.LAZY)
    private Event event;

    @ManyToOne(fetch = FetchType.LAZY)
    private Cashflow cashflow;

    @ManyToOne(fetch = FetchType.LAZY)
    private Account accountFrom;

    @ManyToOne(fetch = FetchType.LAZY)
    private Account accountTo;

    @OneToMany(mappedBy = "transaction")
    @XmlTransient
    private List<Entry> entries;

    public Transaction(LocalDate date, Money amount, Account accountFrom, Account accountTo) {
        this.date = date;
        this.amount = amount;
        this.accountFrom = accountFrom;
        this.accountTo = accountTo;
    }

    public Transaction() {
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Transaction withId(Long id) {
        this.id = id;
        return this;
    }

    public TransactionStatusCode getStatus() {
        return status;
    }

    public void setStatus(TransactionStatusCode status) {
        this.status = status;
    }

    /**
     * Get дата транзакции
     *
     * @return {@link #date}
     */
    public LocalDate getDate() {
        return date;
    }

    /**
     * Set дата транзакции
     *
     * @param date {@link #date}
     */
    public void setDate(LocalDate date) {
        this.date = date;
    }

    /**
     * Set дата транзакции
     *
     * @param date {@link #date}
     * @return {@link #Transaction}
     */
    public Transaction withDate(LocalDate date) {
        this.date = date;
        return this;
    }

    /**
     * Get сумма
     *
     * @return {@link #amount}
     */
    public Money getAmount() {
        return amount;
    }

    /**accountTo
     * Set сумма
     *
     * @param amount {@link #amount}
     */
    public void setAmount(Money amount) {
        this.amount = amount;
    }

    /**
     * Set сумма
     *
     * @param amount {@link #amount}
     * @return {@link #Transaction}
     */
    public Transaction withAmount(Money amount) {
        this.amount = amount;
        return this;
    }

    public Event getEvent() {
        return event;
    }

    public void setEvent(Event event) {
        this.event = event;
    }

    public Transaction withEvent(Event event) {
        this.event = event;
        return this;
    }

    public Cashflow getCashflow() {
        return cashflow;
    }

    public void setCashflow(Cashflow cashflow) {
        this.cashflow = cashflow;
    }

    public Transaction withCashflow(Cashflow cashflow) {
        this.cashflow = cashflow;
        return this;
    }

    public Account getAccountFrom() {
        return accountFrom;
    }

    public void setAccountFrom(Account accountFrom) {
        this.accountFrom = accountFrom;
    }

    public Transaction witassertSameCurrencyAshAccountFrom(Account accountFrom) {
        this.accountFrom = accountFrom;
        return this;
    }

    public Account getAccountTo() {
        return accountTo;
    }

    public void setAccountTo(Account accountTo) {
        this.accountTo = accountTo;
    }

    public Transaction withAccountTo(Account accountTo) {
        this.accountTo = accountTo;
        return this;
    }

    public List<Entry> getEntries() {
        if (entries == null) {
            entries = new ArrayList<>();
        }
        return entries;
    }

    public void setEntries(List<Entry> entries) {
        this.entries = entries;
    }

    public Transaction withEntries(List<Entry> entries) {
        this.entries = entries;
        return this;
    }

    public void addEntry(Entry entry) {
        getEntries().add(entry);
        entry.setTransaction(this);
    }

    public void removeEntry(Entry entry) {
        getEntries().remove(entry);
        entry.setTransaction(null);
    }

    public void execute() {
        Entry entryFrom = new Entry(date, amount.negateMoney());
        accountFrom.addEntry(entryFrom);
        addEntry(entryFrom);
        Entry entryTo = new Entry(date, amount);
        accountTo.addEntry(entryTo);
        addEntry(entryTo);
    }

}