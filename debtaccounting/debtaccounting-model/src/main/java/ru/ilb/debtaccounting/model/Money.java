/**
 * This file was generated by the JPA Modeler
 */
package ru.ilb.debtaccounting.model;

import java.io.Serializable;
import java.util.Currency;
import java.util.Locale;
import javax.persistence.Basic;
import javax.persistence.Embeddable;
import javax.xml.bind.annotation.*;

/**
 * @author slavb
 */

@XmlAccessorType(XmlAccessType.FIELD)
@Embeddable
public class Money implements Serializable {

    private static final int[] CENTS = new int[]{1, 10, 100, 1000};

    static final int TEST_SUM = 968600;

    /**
     * Сумма
     */
    @Basic
    private long amount;

    /**
     * Валюта
     */
    @Basic
    private Currency currency;

    public Money(long amount, Currency currency) {
        this.currency = currency;
        this.amount = amount * centFactor();
    }

    public Money(double amount, Currency currency) {
        this.currency = currency;
        this.amount = Math.round(amount * centFactor());
    }

    public Money() {
    }

    /**
     * Get сумма
     *
     * @return {@link #amount}
     */
    public long getAmount() {
        return amount;
    }

    public static Money getTestSum()
    {
        return locale(TEST_SUM);
    }

    /**
     * Set сумма
     *
     * @param amount {@link #amount}
     */
    public void setAmount(long amount) {
        this.amount = amount;
    }

    /**
     * Set сумма
     *
     * @param amount {@link #amount}
     * @return {@link #Money}
     */
    public Money withAmount(long amount) {
        this.amount = amount;
        return this;
    }

    /**
     * Get валюта
     *
     * @return {@link #currency}
     */
    public Currency getCurrency() {
        return currency;
    }

    /**
     * Set валюта
     *
     * @param currency {@link #currency}
     */
    public void setCurrency(Currency currency) {
        this.currency = currency;
    }

    /**
     * Set валюта
     *
     * @param currency {@link #currency}
     * @return {@link #Money}
     */
    public Money withCurrency(Currency currency) {
        this.currency = currency;
        return this;
    }

    public static Money dollars(double amount) {
        return new Money(amount, Currency.getInstance(Locale.US));
    }

    public static Money locale(double amount) {
        return new Money(amount, Currency.getInstance(Locale.getDefault()));
    }

    /**
     * Функция складывает деньги
     *
     * @param other с чем сложить
     * @return Результат сложения
     */
    public Money addMoney(Money other) {
        assertSameCurrencyAs(other);
        amount += other.amount;
        return this;
    }

    /**
     * Функция вычитает деньги.
     *
     * @param other вычистаемое.
     * @return Результат вычитания.
     */
    public Money subtractMoney(Money other) {
        assertSameCurrencyAs(other);
        return newMoney(amount - other.amount);
    }

    /**
     * Функция меняет знак денег
     *
     * @return Результат смены знака
     */
    public Money negateMoney() {
        return newMoney(-amount);
    }

    /**
     * Функция умнажает деньги на коэффициент.
     *
     * @param arg вычистаемое.
     * @return Результат умножения.
     */
    public Money multiplyMoney(double arg) {
        return new Money((double) amount / centFactor() * arg, currency);
    }

    public int compareTo(Object other) {
        return compareTo((Money) other);
    }

    /**
     * Фунция сравнения денег.
     *
     * @param other с чем сравнить
     * @return -1 меньше, 0 равно, 1 больше
     */
    public int compareTo(Money other) {
        assertSameCurrencyAs(other);
        if (amount < other.amount) {
            return -1;
        }
        if (amount == other.amount) {
            return 0;
        }
        return 1;
    }

    /**
     * Больше ли деньги.
     *
     * @param other с чем сравнивать.
     * @return True, если больше.
     */
    public boolean greaterThan(Money other) {
        return (compareTo(other) > 0);
    }

    /**
     * Разделить деньги на несколько частей.
     *
     * @param n количество частей.
     * @return Массив разделенных денег.
     */
    public Money[] allocate(int n) {
        Money lowResult = newMoney(amount / n);
        Money highResult = newMoney(lowResult.amount + 1);
        Money[] results = new Money[n];
        int remainder = (int) amount % n;
        for (int i = 0; i < remainder; i++) {
            results[i] = highResult;
        }
        for (int i = remainder; i < n; i++) {
            results[i] = lowResult;
        }
        return results;
    }

    /**
     * Разделяет деньги на неравный части.
     *
     * @param ratios пропорция для разделения.
     * @return Массив разделенных денег.
     */
    public Money[] allocate(long[] ratios) {
        long total = 0;
        for (int i = 0; i < ratios.length; i++) {
            total += ratios[i];
        }
        long remainder = amount;
        Money[] results = new Money[ratios.length];
        for (int i = 0; i < results.length; i++) {
            results[i] = newMoney(amount * ratios[i] / total);
            remainder -= results[i].amount;
        }
        for (int i = 0; i < remainder; i++) {
            results[i].amount++;
        }
        return results;
    }

    private int centFactor() {
        return CENTS[currency.getDefaultFractionDigits()];
    }

    private void assertSameCurrencyAs(Money arg) {
        if (!currency.equals(arg.currency)) {
            throw new AssertionError("currency mismatch");
        }
    }

    private Money newMoney(long amount) {
        Money money = new Money();
        money.currency = this.currency;
        money.amount = amount;
        return money;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Money money = (Money) o;
        if (amount != money.amount) {
            return false;
        }
        if (currency != null ? !currency.equals(money.currency) : money.currency != null) {
            return false;
        }
        return true;
    }

    @Override
    public int hashCode() {
        int result;
        result = (int) (amount ^ (amount >>> 32));
        result = 31 * result + (currency != null ? currency.hashCode() : 0);
        return result;
    }

    @Override
    public String toString() {
        return "Money{" + "amount=" + amount + ", currency=" + currency + '}';
    }

}